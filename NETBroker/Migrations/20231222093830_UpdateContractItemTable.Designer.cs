// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace NETBroker.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231222093830_UpdateContractItemTable")]
    partial class UpdateContractItemTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Core.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Core.Entities.CommisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommissionConfigurationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MarginPercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProgramAdder")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProgramAdderType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesProgramId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("CommisionTypes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CommisionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 542, DateTimeKind.Local).AddTicks(251),
                            IsActive = true,
                            Name = "Contact 1"
                        },
                        new
                        {
                            Id = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 542, DateTimeKind.Local).AddTicks(255),
                            IsActive = true,
                            Name = "Contact 2"
                        },
                        new
                        {
                            Id = 3,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 542, DateTimeKind.Local).AddTicks(256),
                            IsActive = true,
                            Name = "Contact 3"
                        },
                        new
                        {
                            Id = 4,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 542, DateTimeKind.Local).AddTicks(256),
                            IsActive = true,
                            Name = "Contact 4"
                        },
                        new
                        {
                            Id = 5,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 542, DateTimeKind.Local).AddTicks(257),
                            IsActive = true,
                            Name = "Contact 5"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingChargeType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CloserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnrollmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FronterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PricingType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SoldDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupplierId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CloserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FronterId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingChargeType = 0,
                            BillingType = 0,
                            CloserId = 1,
                            ContactId = 1,
                            Creator = 1,
                            CustomerId = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 540, DateTimeKind.Local).AddTicks(7207),
                            EnrollmentType = 0,
                            FronterId = 1,
                            IsActive = true,
                            LegalEntityName = "John A",
                            PricingType = 0,
                            SoldDate = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stage = 0,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            BillingChargeType = 0,
                            BillingType = 0,
                            CloserId = 1,
                            ContactId = 1,
                            Creator = 2,
                            CustomerId = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 540, DateTimeKind.Local).AddTicks(7216),
                            EnrollmentType = 0,
                            FronterId = 1,
                            IsActive = true,
                            LegalEntityName = "John B",
                            PricingType = 0,
                            SoldDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stage = 0,
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.ContractItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Adder")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AnnualUsage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ContractId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ContractMargin")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnergyUnitType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ForecastStateEnum")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SaleProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TermMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UtilityAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("SaleProgramId")
                        .IsUnique();

                    b.ToTable("ContractItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adder = 0.0075m,
                            AnnualUsage = 58398m,
                            ContractId = 1,
                            ContractMargin = 0m,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(6776),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.01275m,
                            StartDate = new DateTime(2023, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 24,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 2,
                            Adder = 0.073m,
                            AnnualUsage = 12303m,
                            ContractId = 1,
                            ContractMargin = 0m,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(6930),
                            EnergyUnitType = 1,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 0.2275m,
                            StartDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 16,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 3,
                            Adder = 6.3m,
                            AnnualUsage = 835m,
                            ContractId = 1,
                            ContractMargin = 0m,
                            Creator = 3,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(6958),
                            EnergyUnitType = 2,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 23m,
                            StartDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 4,
                            Adder = 0.0073m,
                            AnnualUsage = 160880m,
                            ContractId = 1,
                            ContractMargin = 0m,
                            Creator = 4,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(6981),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.02275m,
                            StartDate = new DateTime(2023, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 15,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 5,
                            Adder = 0.083m,
                            AnnualUsage = 89340m,
                            ContractId = 1,
                            ContractMargin = 0m,
                            Creator = 5,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(7002),
                            EnergyUnitType = 3,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 0.3275m,
                            StartDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 6,
                            Adder = 0.003m,
                            AnnualUsage = 36000m,
                            ContractId = 2,
                            ContractMargin = 0m,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(7076),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.0225m,
                            StartDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 17,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 7,
                            Adder = 0.073m,
                            AnnualUsage = 4200m,
                            ContractId = 2,
                            ContractMargin = 0m,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(7102),
                            EnergyUnitType = 4,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 2.275m,
                            StartDate = new DateTime(2023, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 14,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 8,
                            Adder = 5.32m,
                            AnnualUsage = 1500m,
                            ContractId = 2,
                            ContractMargin = 0m,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(7125),
                            EnergyUnitType = 2,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 20.75m,
                            StartDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 16,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 9,
                            Adder = 0.053m,
                            AnnualUsage = 60000m,
                            ContractId = 2,
                            ContractMargin = 0m,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(7145),
                            EnergyUnitType = 1,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 0.1275m,
                            StartDate = new DateTime(2023, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 18,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 10,
                            Adder = 0.0033m,
                            AnnualUsage = 15000m,
                            ContractId = 2,
                            ContractMargin = 0m,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(7165),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.04275m,
                            StartDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TermMonth = 15,
                            UtilityAccountNumber = "177478640021"
                        });
                });

            modelBuilder.Entity("Core.Entities.ContractItemAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContractItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractItemId");

                    b.ToTable("ContractItemAttachments");
                });

            modelBuilder.Entity("Core.Entities.ContractItemForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ContractItemId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForecastMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForecastMonthOfYear")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForecastYear")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SaleProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContractItemId");

                    b.HasIndex("SaleProgramId");

                    b.ToTable("ContractItemForecasts");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(8749),
                            IsActive = true,
                            Name = "Customer 1"
                        },
                        new
                        {
                            Id = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(8754),
                            IsActive = true,
                            Name = "Customer 2"
                        },
                        new
                        {
                            Id = 3,
                            Creator = 2,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(8755),
                            IsActive = true,
                            Name = "Customer 3"
                        },
                        new
                        {
                            Id = 4,
                            Creator = 2,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(8755),
                            IsActive = true,
                            Name = "Customer 4"
                        },
                        new
                        {
                            Id = 5,
                            Creator = 3,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 541, DateTimeKind.Local).AddTicks(8756),
                            IsActive = true,
                            Name = "Customer 5"
                        });
                });

            modelBuilder.Entity("Core.Entities.DateConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommisionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateModifierType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateOffsetType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateOffsetValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommisionTypeId")
                        .IsUnique();

                    b.ToTable("DateConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommisionTypeId = 1,
                            ControlDateModifierType = 0,
                            ControlDateOffsetType = 4,
                            ControlDateOffsetValue = 2,
                            ControlDateType = 0
                        },
                        new
                        {
                            Id = 2,
                            CommisionTypeId = 2,
                            ControlDateModifierType = 0,
                            ControlDateOffsetType = 0,
                            ControlDateOffsetValue = 0,
                            ControlDateType = 0
                        },
                        new
                        {
                            Id = 3,
                            CommisionTypeId = 3,
                            ControlDateModifierType = 0,
                            ControlDateOffsetType = 0,
                            ControlDateOffsetValue = 0,
                            ControlDateType = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Deposits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 156.34m,
                            PaymentDate = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 19.25m,
                            PaymentDate = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 8.75m,
                            PaymentDate = new DateTime(2023, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesProgramId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("Qualifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Qualification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.SaleProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContractItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnergyUnitType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalesProgramType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SalePrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "50% contract upfront then residual",
                            EnergyUnitType = 0,
                            SalesProgramType = "PercentageContractUpfront + PercentageContractResidual"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Forecast annual margin divided by four",
                            EnergyUnitType = 3,
                            SalesProgramType = "QuarterlyUpfront"
                        });
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 540, DateTimeKind.Local).AddTicks(5836),
                            IsActive = true,
                            Name = "IGS"
                        },
                        new
                        {
                            Id = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 540, DateTimeKind.Local).AddTicks(5841),
                            IsActive = true,
                            Name = "TTS"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f8040f3-abd9-4946-abc5-699f972ec5a2",
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 540, DateTimeKind.Local).AddTicks(2887),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7cabff9-3d0f-4f2a-90cf-0d8857cd0d4f",
                            DateCreated = new DateTime(2023, 12, 22, 16, 38, 30, 540, DateTimeKind.Local).AddTicks(2995),
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            FullName = "User",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.AnnualUpfront", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("AnnualUpfront");
                });

            modelBuilder.Entity("Core.Entities.Bridge", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.Property<decimal>("Fee")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Bridge");
                });

            modelBuilder.Entity("Core.Entities.ContractUpfront", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.HasDiscriminator().HasValue("ContractUpfront");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommissionConfigurationType = "ContractUpfront",
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.007m,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.FirstAnnualUpfront", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT");

                    b.ToTable("CommisionTypes", t =>
                        {
                            t.Property("DiscountPercentage")
                                .HasColumnName("FirstAnnualUpfront_DiscountPercentage");
                        });

                    b.HasDiscriminator().HasValue("FirstAnnualUpfront");
                });

            modelBuilder.Entity("Core.Entities.FirstAnnualUpfront25kMax", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.HasDiscriminator().HasValue("FirstAnnualUpfront25kMax");
                });

            modelBuilder.Entity("Core.Entities.PercentageAdderResidual", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.HasDiscriminator().HasValue("PercentageAdderResidual");
                });

            modelBuilder.Entity("Core.Entities.PercentageContractResidual", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.HasDiscriminator().HasValue("PercentageContractResidual");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CommissionConfigurationType = "PercentageContractResidual",
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.007m,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.PercentageFirstAnnualRemainderResidual", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.HasDiscriminator().HasValue("PercentageFirstAnnualRemainderResidual");
                });

            modelBuilder.Entity("Core.Entities.QuarterlyUpfront", b =>
                {
                    b.HasBaseType("Core.Entities.CommisionType");

                    b.HasDiscriminator().HasValue("QuarterlyUpfront");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CommissionConfigurationType = "QuarterlyUpfront",
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.007m,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.AnnualUssageQualification", b =>
                {
                    b.HasBaseType("Core.Entities.Qualification");

                    b.Property<int>("FromAnnualUsage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToAnnualUsage")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("AnnualUssageQualification");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            SalesProgramId = 2,
                            FromAnnualUsage = 50000,
                            ToAnnualUsage = 100000
                        });
                });

            modelBuilder.Entity("Core.Entities.ExpirationQualification", b =>
                {
                    b.HasBaseType("Core.Entities.Qualification");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ExpirationQualification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SalesProgramId = 1,
                            EffectiveDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiryDate = new DateTime(2030, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            SalesProgramId = 2,
                            EffectiveDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiryDate = new DateTime(2099, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Entities.CommisionType", b =>
                {
                    b.HasOne("Core.Entities.SaleProgram", "SaleProgram")
                        .WithMany("CommisionTypes")
                        .HasForeignKey("SalesProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleProgram");
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", "Closer")
                        .WithMany("CloserContracts")
                        .HasForeignKey("CloserId");

                    b.HasOne("Core.Entities.Contact", "Contact")
                        .WithMany("Contracts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile", "Fronter")
                        .WithMany("FronterContracts")
                        .HasForeignKey("FronterId");

                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("Contracts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Closer");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Fronter");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.ContractItem", b =>
                {
                    b.HasOne("Core.Entities.Contract", "Contract")
                        .WithMany("ContractItems")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SaleProgram", "SaleProgram")
                        .WithOne("ContractItem")
                        .HasForeignKey("Core.Entities.ContractItem", "SaleProgramId");

                    b.Navigation("Contract");

                    b.Navigation("SaleProgram");
                });

            modelBuilder.Entity("Core.Entities.ContractItemAttachment", b =>
                {
                    b.HasOne("Core.Entities.ContractItem", "ContractItem")
                        .WithMany("Attachments")
                        .HasForeignKey("ContractItemId");

                    b.Navigation("ContractItem");
                });

            modelBuilder.Entity("Core.Entities.ContractItemForecast", b =>
                {
                    b.HasOne("Core.Entities.ContractItem", "ContractItem")
                        .WithMany("ContractItemForecasts")
                        .HasForeignKey("ContractItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SaleProgram", null)
                        .WithMany("ContractItemForecasts")
                        .HasForeignKey("SaleProgramId");

                    b.Navigation("ContractItem");
                });

            modelBuilder.Entity("Core.Entities.DateConfig", b =>
                {
                    b.HasOne("Core.Entities.CommisionType", "CommisionTypes")
                        .WithOne("DateConfig")
                        .HasForeignKey("Core.Entities.DateConfig", "CommisionTypeId");

                    b.Navigation("CommisionTypes");
                });

            modelBuilder.Entity("Core.Entities.Deposit", b =>
                {
                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("Deposits")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Qualification", b =>
                {
                    b.HasOne("Core.Entities.SaleProgram", "SaleProgram")
                        .WithMany("Qualifications")
                        .HasForeignKey("SalesProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleProgram");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.CommisionType", b =>
                {
                    b.Navigation("DateConfig");
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.Navigation("ContractItems");
                });

            modelBuilder.Entity("Core.Entities.ContractItem", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ContractItemForecasts");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.SaleProgram", b =>
                {
                    b.Navigation("CommisionTypes");

                    b.Navigation("ContractItem");

                    b.Navigation("ContractItemForecasts");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("Core.Entities.UserProfile", b =>
                {
                    b.Navigation("CloserContracts");

                    b.Navigation("FronterContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
