// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace NETBroker.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Core.Entities.CommisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommissionConfigurationTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarginPercent")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ProgramAdder")
                        .HasColumnType("REAL");

                    b.Property<string>("ProgramAdderType")
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("CommisionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommissionConfigurationTypeId = "ContractUpfront",
                            MarginPercent = "0.5",
                            ProgramAdder = 0.0070000000000000001,
                            ProgramAdderType = "Override",
                            SalesProgramId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommissionConfigurationTypeId = "PercentageContractResidual",
                            MarginPercent = "0.5",
                            ProgramAdder = 0.0070000000000000001,
                            ProgramAdderType = "Override",
                            SalesProgramId = 1
                        },
                        new
                        {
                            Id = 3,
                            CommissionConfigurationTypeId = "QuarterlyUpfront",
                            MarginPercent = "x",
                            ProgramAdder = 0.0070000000000000001,
                            ProgramAdderType = "Override",
                            SalesProgramId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(2173),
                            IsActive = true,
                            Name = "Contact 1"
                        },
                        new
                        {
                            Id = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(2178),
                            IsActive = true,
                            Name = "Contact 2"
                        },
                        new
                        {
                            Id = 3,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(2179),
                            IsActive = true,
                            Name = "Contact 3"
                        },
                        new
                        {
                            Id = 4,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(2180),
                            IsActive = true,
                            Name = "Contact 4"
                        },
                        new
                        {
                            Id = 5,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(2181),
                            IsActive = true,
                            Name = "Contact 5"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingChargeType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CloserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnrollmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FronterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PricingType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingChargeType = 0,
                            BillingType = 0,
                            CloserId = 1,
                            ContactId = 1,
                            Creator = 1,
                            CustomerId = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8608),
                            EnrollmentType = 0,
                            FronterId = 1,
                            IsActive = true,
                            LegalEntityName = "John A",
                            PricingType = 0,
                            SoldDate = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            BillingChargeType = 0,
                            BillingType = 0,
                            ContactId = 1,
                            Creator = 2,
                            CustomerId = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8614),
                            EnrollmentType = 0,
                            IsActive = true,
                            LegalEntityName = "John B",
                            PricingType = 0,
                            SoldDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.ContractItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Adder")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AnnualUsage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnergyUnitType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductType")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TermMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UtilityAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adder = 0.0075m,
                            AnnualUsage = 58398,
                            ContractId = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8916),
                            EndDate = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "KWH",
                            IsActive = true,
                            ProductType = "Elec",
                            Rate = 0.01275m,
                            StartDate = new DateTime(2023, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 24,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 2,
                            Adder = 0.073m,
                            AnnualUsage = 12303,
                            ContractId = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8923),
                            EndDate = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "CCF",
                            IsActive = true,
                            ProductType = "Gas",
                            Rate = 0.2275m,
                            StartDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 16,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 3,
                            Adder = 6.3m,
                            AnnualUsage = 835,
                            ContractId = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8925),
                            EndDate = new DateTime(2024, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "MWH",
                            IsActive = true,
                            ProductType = "Elec",
                            Rate = 23m,
                            StartDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 4,
                            Adder = 0.0073m,
                            AnnualUsage = 160880,
                            ContractId = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8927),
                            EndDate = new DateTime(2024, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "KWH",
                            IsActive = true,
                            ProductType = "Elec",
                            Rate = 0.02275m,
                            StartDate = new DateTime(2023, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 15,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 5,
                            Adder = 0.083m,
                            AnnualUsage = 89340,
                            ContractId = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8928),
                            EndDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "THM",
                            IsActive = true,
                            ProductType = "Gas",
                            Rate = 0.3275m,
                            StartDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 6,
                            Adder = 0.003m,
                            AnnualUsage = 36000,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8930),
                            EndDate = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "KWH",
                            IsActive = true,
                            ProductType = "Elec",
                            Rate = 0.0225m,
                            StartDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 17,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 7,
                            Adder = 0.073m,
                            AnnualUsage = 4200,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8932),
                            EndDate = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "MCF",
                            IsActive = true,
                            ProductType = "Gas",
                            Rate = 2.275m,
                            StartDate = new DateTime(2023, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 14,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 8,
                            Adder = 5.32m,
                            AnnualUsage = 1500,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8933),
                            EndDate = new DateTime(2024, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "MWH",
                            IsActive = true,
                            ProductType = "Elec",
                            Rate = 20.75m,
                            StartDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 16,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 9,
                            Adder = 0.053m,
                            AnnualUsage = 60000,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8937),
                            EndDate = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "CCF",
                            IsActive = true,
                            ProductType = "Gas",
                            Rate = 0.1275m,
                            StartDate = new DateTime(2023, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 18,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 10,
                            Adder = 0.0033m,
                            AnnualUsage = 15000,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(8939),
                            EndDate = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = "KWH",
                            IsActive = true,
                            ProductType = "Elec",
                            Rate = 0.04275m,
                            StartDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 15,
                            UtilityAccountNumber = "177478640021"
                        });
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(599),
                            IsActive = true,
                            Name = "Customer 1"
                        },
                        new
                        {
                            Id = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(604),
                            IsActive = true,
                            Name = "Customer 2"
                        },
                        new
                        {
                            Id = 3,
                            Creator = 2,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(605),
                            IsActive = true,
                            Name = "Customer 3"
                        },
                        new
                        {
                            Id = 4,
                            Creator = 2,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(606),
                            IsActive = true,
                            Name = "Customer 4"
                        },
                        new
                        {
                            Id = 5,
                            Creator = 3,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 593, DateTimeKind.Local).AddTicks(607),
                            IsActive = true,
                            Name = "Customer 5"
                        });
                });

            modelBuilder.Entity("Core.Entities.DateConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ControlDateModifierType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlDateOffsetType")
                        .HasColumnType("TEXT");

                    b.Property<double>("ControlDateOffsetValue")
                        .HasColumnType("REAL");

                    b.Property<string>("ControlDateType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DateConfigs");
                });

            modelBuilder.Entity("Core.Entities.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Deposits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 156.34m,
                            PaymentDate = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 19.25m,
                            PaymentDate = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 8.75m,
                            PaymentDate = new DateTime(2023, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.SaleProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnergyUnitType")
                        .HasColumnType("TEXT");

                    b.Property<string>("SalesProgramType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SalePrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "50% contract upfront then residual",
                            EnergyUnitType = "KWH",
                            SalesProgramType = "PercentageContractUpfront + PercentageContractResidual"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Forecast annual margin divided by four",
                            EnergyUnitType = "THM",
                            SalesProgramType = "QuarterlyUpfront"
                        });
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(7153),
                            IsActive = true,
                            Name = "IGS"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "",
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 579, DateTimeKind.Local).AddTicks(1541),
                            FullName = "Admin",
                            IsActive = true,
                            PasswordHash = "V79qBaPpcUa+25VP7/kZSAnFXcwiRVEbLf9Ty493CjR252jtonOUmSupDRUiMLUN",
                            Phone = "",
                            UserName = "admin",
                            UserType = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "",
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 585, DateTimeKind.Local).AddTicks(7902),
                            FullName = "User",
                            IsActive = true,
                            PasswordHash = "OBKZ9okBUcXk9mKpDYJrzpXNtWP7ic9UdNOR+gZlRnSsGQgQny89EX9uH/ZnWWQA",
                            Phone = "",
                            UserName = "user",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "",
                            DateCreated = new DateTime(2023, 9, 21, 16, 54, 4, 592, DateTimeKind.Local).AddTicks(3953),
                            FullName = "Partner",
                            IsActive = true,
                            PasswordHash = "Eo19PoEUbmCa2L206YwQ4/5bCKfnXZWRXBlUUnIUNQ2S7AT2TEi3Bv31rWhp86vm",
                            Phone = "",
                            UserName = "partner",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.CommisionType", b =>
                {
                    b.HasOne("Core.Entities.SaleProgram", "SaleProgram")
                        .WithMany("CommisionTypes")
                        .HasForeignKey("SalesProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleProgram");
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.HasOne("Core.Entities.Contact", "Contact")
                        .WithMany("Contracts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("Contracts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany("Contracts")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.ContractItem", b =>
                {
                    b.HasOne("Core.Entities.Contract", "Contract")
                        .WithMany("ContractItems")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Core.Entities.Deposit", b =>
                {
                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("Deposits")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.Navigation("ContractItems");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.SaleProgram", b =>
                {
                    b.Navigation("CommisionTypes");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("Core.Entities.UserProfile", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
