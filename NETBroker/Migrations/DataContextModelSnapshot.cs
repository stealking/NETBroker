// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace NETBroker.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Core.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Core.Entities.CommisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommissionConfigurationTypeId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DateConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MarginPercent")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ProgramAdder")
                        .HasColumnType("REAL");

                    b.Property<int>("ProgramAdderType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesProgramId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommissionConfigurationTypeId");

                    b.HasIndex("DateConfigId");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("CommisionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommissionConfigurationTypeId = 1,
                            DateConfigId = 1,
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.0070000000000000001,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommissionConfigurationTypeId = 2,
                            DateConfigId = 2,
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.0070000000000000001,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        },
                        new
                        {
                            Id = 3,
                            CommissionConfigurationTypeId = 3,
                            DateConfigId = 3,
                            MarginPercent = 0m,
                            ProgramAdder = 0.0070000000000000001,
                            ProgramAdderType = 1,
                            SalesProgramId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.CommissionConfigurationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CommissionConfigurationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ContractUpfront"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PercentageContractResidual"
                        },
                        new
                        {
                            Id = 3,
                            Name = "QuarterlyUpfront"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(4316),
                            IsActive = true,
                            Name = "Contact 1"
                        },
                        new
                        {
                            Id = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(4320),
                            IsActive = true,
                            Name = "Contact 2"
                        },
                        new
                        {
                            Id = 3,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(4321),
                            IsActive = true,
                            Name = "Contact 3"
                        },
                        new
                        {
                            Id = 4,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(4321),
                            IsActive = true,
                            Name = "Contact 4"
                        },
                        new
                        {
                            Id = 5,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(4322),
                            IsActive = true,
                            Name = "Contact 5"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingChargeType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CloserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnrollmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FronterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PricingType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupplierId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CloserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FronterId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingChargeType = 0,
                            BillingType = 0,
                            CloserId = 1,
                            ContactId = 1,
                            Creator = 1,
                            CustomerId = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(936),
                            EnrollmentType = 0,
                            FronterId = 1,
                            IsActive = true,
                            LegalEntityName = "John A",
                            PricingType = 0,
                            SoldDate = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            BillingChargeType = 0,
                            BillingType = 0,
                            CloserId = 1,
                            ContactId = 1,
                            Creator = 2,
                            CustomerId = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(943),
                            EnrollmentType = 0,
                            FronterId = 1,
                            IsActive = true,
                            LegalEntityName = "John B",
                            PricingType = 0,
                            SoldDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.ContractItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Adder")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AnnualUsage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnergyUnitType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TermMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UtilityAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adder = 0.0075m,
                            AnnualUsage = 58398,
                            ContractId = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1268),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 0,
                            Rate = 0.01275m,
                            StartDate = new DateTime(2023, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 24,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 2,
                            Adder = 0.073m,
                            AnnualUsage = 12303,
                            ContractId = 1,
                            Creator = 2,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1272),
                            EnergyUnitType = 1,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.2275m,
                            StartDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 16,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 3,
                            Adder = 6.3m,
                            AnnualUsage = 835,
                            ContractId = 1,
                            Creator = 3,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1275),
                            EnergyUnitType = 2,
                            IsActive = true,
                            ProductType = 0,
                            Rate = 23m,
                            StartDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 4,
                            Adder = 0.0073m,
                            AnnualUsage = 160880,
                            ContractId = 1,
                            Creator = 4,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1276),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 0,
                            Rate = 0.02275m,
                            StartDate = new DateTime(2023, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 15,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 5,
                            Adder = 0.083m,
                            AnnualUsage = 89340,
                            ContractId = 1,
                            Creator = 5,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1277),
                            EnergyUnitType = 3,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.3275m,
                            StartDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 6,
                            Adder = 0.003m,
                            AnnualUsage = 36000,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1279),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 0,
                            Rate = 0.0225m,
                            StartDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 17,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 7,
                            Adder = 0.073m,
                            AnnualUsage = 4200,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1280),
                            EnergyUnitType = 4,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 2.275m,
                            StartDate = new DateTime(2023, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 14,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 8,
                            Adder = 5.32m,
                            AnnualUsage = 1500,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1281),
                            EnergyUnitType = 2,
                            IsActive = true,
                            ProductType = 0,
                            Rate = 20.75m,
                            StartDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 16,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 9,
                            Adder = 0.053m,
                            AnnualUsage = 60000,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1283),
                            EnergyUnitType = 1,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.1275m,
                            StartDate = new DateTime(2023, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 18,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 10,
                            Adder = 0.0033m,
                            AnnualUsage = 15000,
                            ContractId = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(1284),
                            EnergyUnitType = 0,
                            IsActive = true,
                            ProductType = 0,
                            Rate = 0.04275m,
                            StartDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TermMonth = 15,
                            UtilityAccountNumber = "177478640021"
                        });
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(2759),
                            IsActive = true,
                            Name = "Customer 1"
                        },
                        new
                        {
                            Id = 2,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(2764),
                            IsActive = true,
                            Name = "Customer 2"
                        },
                        new
                        {
                            Id = 3,
                            Creator = 2,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(2765),
                            IsActive = true,
                            Name = "Customer 3"
                        },
                        new
                        {
                            Id = 4,
                            Creator = 2,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(2765),
                            IsActive = true,
                            Name = "Customer 4"
                        },
                        new
                        {
                            Id = 5,
                            Creator = 3,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 645, DateTimeKind.Local).AddTicks(2766),
                            IsActive = true,
                            Name = "Customer 5"
                        });
                });

            modelBuilder.Entity("Core.Entities.DateConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ControlDateModifierType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ControlDateOffsetType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ControlDateOffsetValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlDateType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DateConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ControlDateModifierType = "NoModifier",
                            ControlDateOffsetType = 5,
                            ControlDateOffsetValue = 2m,
                            ControlDateType = "SoldDate"
                        },
                        new
                        {
                            Id = 2,
                            ControlDateModifierType = "NoModifier",
                            ControlDateOffsetType = 0,
                            ControlDateOffsetValue = 2m,
                            ControlDateType = "SoldDate"
                        },
                        new
                        {
                            Id = 3,
                            ControlDateModifierType = "NoModifier",
                            ControlDateOffsetType = 0,
                            ControlDateOffsetValue = 2m,
                            ControlDateType = "SoldDate"
                        });
                });

            modelBuilder.Entity("Core.Entities.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Deposits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 156.34m,
                            PaymentDate = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 19.25m,
                            PaymentDate = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 8.75m,
                            PaymentDate = new DateTime(2023, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesProgramId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("Qualifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Qualification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.SaleProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnergyUnitType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalesProgramType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SalePrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "50% contract upfront then residual",
                            EnergyUnitType = 0,
                            SalesProgramType = "PercentageContractUpfront + PercentageContractResidual"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Forecast annual margin divided by four",
                            EnergyUnitType = 3,
                            SalesProgramType = "QuarterlyUpfront"
                        });
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Creator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creator = 1,
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 644, DateTimeKind.Local).AddTicks(9443),
                            IsActive = true,
                            Name = "IGS"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cdab079-9aab-4013-892d-e0c46406a634",
                            DateCreated = new DateTime(2023, 10, 26, 16, 54, 4, 644, DateTimeKind.Local).AddTicks(6516),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.AnnualUssageQualification", b =>
                {
                    b.HasBaseType("Core.Entities.Qualification");

                    b.Property<int>("FromAnnualUsage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToAnnualUsage")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("AnnualUssageQualification");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            SalesProgramId = 2,
                            FromAnnualUsage = 50000,
                            ToAnnualUsage = 100000
                        });
                });

            modelBuilder.Entity("Core.Entities.ExpirationQualification", b =>
                {
                    b.HasBaseType("Core.Entities.Qualification");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ExpirationQualification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SalesProgramId = 1,
                            EffectiveDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiryDate = new DateTime(2030, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            SalesProgramId = 2,
                            EffectiveDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiryDate = new DateTime(2099, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Entities.CommisionType", b =>
                {
                    b.HasOne("Core.Entities.CommissionConfigurationType", "CommissionConfigurationType")
                        .WithMany("CommisionTypes")
                        .HasForeignKey("CommissionConfigurationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.DateConfig", "DateConfig")
                        .WithMany("CommisionTypes")
                        .HasForeignKey("DateConfigId");

                    b.HasOne("Core.Entities.SaleProgram", "SaleProgram")
                        .WithMany("CommisionTypes")
                        .HasForeignKey("SalesProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommissionConfigurationType");

                    b.Navigation("DateConfig");

                    b.Navigation("SaleProgram");
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", "Closer")
                        .WithMany("CloserContracts")
                        .HasForeignKey("CloserId");

                    b.HasOne("Core.Entities.Contact", "Contact")
                        .WithMany("Contracts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile", "Fronter")
                        .WithMany("FronterContracts")
                        .HasForeignKey("FronterId");

                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("Contracts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Closer");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Fronter");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.ContractItem", b =>
                {
                    b.HasOne("Core.Entities.Contract", "Contract")
                        .WithMany("ContractItems")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Core.Entities.Deposit", b =>
                {
                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("Deposits")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Qualification", b =>
                {
                    b.HasOne("Core.Entities.SaleProgram", "SaleProgram")
                        .WithMany("Qualifications")
                        .HasForeignKey("SalesProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleProgram");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.CommissionConfigurationType", b =>
                {
                    b.Navigation("CommisionTypes");
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.Contract", b =>
                {
                    b.Navigation("ContractItems");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.DateConfig", b =>
                {
                    b.Navigation("CommisionTypes");
                });

            modelBuilder.Entity("Core.Entities.SaleProgram", b =>
                {
                    b.Navigation("CommisionTypes");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("Core.Entities.UserProfile", b =>
                {
                    b.Navigation("CloserContracts");

                    b.Navigation("FronterContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
